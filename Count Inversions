import java.util.ArrayList;

public class Solution {

    public static int mergeSort(long arr[], int left, int right) {
        int count = 0;
        if (left < right) {
            int mid = (left + right) / 2;
            count += mergeSort(arr, left, mid);
            count += mergeSort(arr, mid + 1, right);
            count += merge(arr, left, mid, right);
        }
        return count;
    }

    public static int merge(long arr[], int left, int mid, int right) {
        ArrayList<Long> temp = new ArrayList<>();
        int l = left;
        int r = mid + 1;
        int count = 0;

        while (l <= mid && r <= right) {
            if (arr[l] <= arr[r]) {
                temp.add(arr[l]);
                l++;
            } else {
                temp.add(arr[r]);
                count += (mid - l + 1);
                r++;
            }
        }

        // If elements on the left half are still left
        while (l <= mid) {
            temp.add(arr[l]);
            l++;
        }

        // If elements on the right half are still left
        while (r <= right) {
            temp.add(arr[r]);
            r++;
        }

        // Transfering all elements from temporary to arr
        for (int i = left; i <= right; i++) {
            arr[i] = temp.get(i - left);
        }
        return count;
    }

    public static long getInversions(long arr[], int n) {
        return mergeSort(arr, 0, n - 1);
    }
}
